function printAnsicolors (term): string {
  return Object.keys(term)
    .map((color, i) => `let g:terminal_ansi_colors_${color} = '${term[i]}'
`)
    .join()
}

function printTermColors (term): string {
  return Object.keys(term)
    .map((color, i) => `let g:terminal_color_${color} = '${term[i]}'
`)
    .join()
}

export function renderColorscheme (theme, pkg, term, estiloVersion: string): string {
  return `" ===============================================================
" ${theme.name}
" ${theme.description}
" URL: ${pkg.url}
" Author: ${pkg.author}
" License: ${pkg.license}
" ===============================================================

set background=${theme.background}
hi clear
if exists("syntax_on")
  syntax reset
endif
let g:colors_name="${theme.name}"


let Italic = ""
if exists('g:${theme.name}_italic')
  let Italic = "italic"
endif
let g:${theme.name}_italic = get(g:, '${theme.name}_italic', 0)

let Bold = ""
if exists('g:${theme.name}_bold')
  let Bold = "bold"
endif

let g:${theme.name}_bold = get(g:, '${theme.name}_bold', 0)
{{#each c~}}
  {{#if link}}hi link {{@key}} {{link~}}
  {{~^~}}hi {{ @key }}
    {{~#if fore}} guifg={{fore.[0]}} ctermfg={{fore.[1]}}{{/if}}
    {{~#if back}} guibg={{back.[0]}} ctermbg={{back.[1]}}{{/if}}
    {{~#if ui}} gui={{ui}} cterm={{ui}}{{/if}}
    {{~#if guisp}} guisp={{guisp.[0]}}{{/if}}
  {{~/if}}

{{/each}}

if exists('*term_setansicolors')
  let g:terminal_ansi_colors = repeat([0], 16)

${printAnsicolors(term)}
endif

if has('nvim')
${printTermColors(term)}
endif

" Generated by Estilo ${estiloVersion} (https://github.com/jacoborus/estilo)
  `
}
